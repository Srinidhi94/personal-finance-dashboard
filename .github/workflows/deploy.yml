name: Deploy to AWS

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: personal-finance
  ECS_SERVICE: personal-finance-service
  ECS_CLUSTER: personal-finance-cluster
  ECS_TASK_DEFINITION: personal-finance

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements_new.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements_new.txt

    - name: Run tests
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        FLASK_ENV: testing
      run: |
        pytest tests/ -v

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Set environment suffix
      run: |
        if [[ $GITHUB_REF == 'refs/heads/main' ]]; then
          echo "ENVIRONMENT=production" >> $GITHUB_ENV
          echo "ENV_SUFFIX=" >> $GITHUB_ENV
        else
          echo "ENVIRONMENT=development" >> $GITHUB_ENV
          echo "ENV_SUFFIX=-dev" >> $GITHUB_ENV
        fi

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and push it to ECR
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        
        # Tag as latest for the environment
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest$ENV_SUFFIX
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest$ENV_SUFFIX
        
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: .aws/task-definition.json
        container-name: ${{ env.ECR_REPOSITORY }}
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}${{ env.ENV_SUFFIX }}
        cluster: ${{ env.ECS_CLUSTER }}${{ env.ENV_SUFFIX }}
        wait-for-service-stability: true

    - name: Run database migrations
      run: |
        # Get the task ARN
        TASK_ARN=$(aws ecs list-tasks --cluster ${{ env.ECS_CLUSTER }}${{ env.ENV_SUFFIX }} --service-name ${{ env.ECS_SERVICE }}${{ env.ENV_SUFFIX }} --query 'taskArns[0]' --output text)
        
        if [ "$TASK_ARN" != "None" ]; then
          # Run migration command
          aws ecs execute-command \
            --cluster ${{ env.ECS_CLUSTER }}${{ env.ENV_SUFFIX }} \
            --task $TASK_ARN \
            --container ${{ env.ECR_REPOSITORY }} \
            --interactive \
            --command "flask db upgrade"
        fi

  notify:
    needs: [test, build-and-deploy]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Notify deployment status
      if: github.ref == 'refs/heads/main'
      run: |
        if [[ "${{ needs.build-and-deploy.result }}" == "success" ]]; then
          echo "✅ Deployment to production successful!"
        else
          echo "❌ Deployment to production failed!"
        fi 